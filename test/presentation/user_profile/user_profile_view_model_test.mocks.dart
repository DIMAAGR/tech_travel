// Mocks generated by Mockito 5.4.4 from annotations
// in tech_travel/test/presentation/user_profile/user_profile_view_model_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:dartz/dartz.dart' as _i2;
import 'package:mobx/mobx.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:tech_travel/src/core/errors/failure.dart' as _i6;
import 'package:tech_travel/src/data/models/update_me_model.dart' as _i8;
import 'package:tech_travel/src/data/services/user_service.dart' as _i9;
import 'package:tech_travel/src/domain/entities/user_entity.dart' as _i10;
import 'package:tech_travel/src/domain/usecases/update_user_use_case.dart'
    as _i7;
import 'package:tech_travel/src/domain/usecases/user_use_case.dart' as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeReactiveContext_1 extends _i1.SmartFake
    implements _i3.ReactiveContext {
  _FakeReactiveContext_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [LogoutUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockLogoutUseCase extends _i1.Mock implements _i4.LogoutUseCase {
  MockLogoutUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i2.Either<_i6.Failure, bool>> call() => (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
        ),
        returnValue: _i5.Future<_i2.Either<_i6.Failure, bool>>.value(
            _FakeEither_0<_i6.Failure, bool>(
          this,
          Invocation.method(
            #call,
            [],
          ),
        )),
      ) as _i5.Future<_i2.Either<_i6.Failure, bool>>);
}

/// A class which mocks [DeleteAccountUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockDeleteAccountUseCase extends _i1.Mock
    implements _i4.DeleteAccountUseCase {
  MockDeleteAccountUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i2.Either<_i6.Failure, bool>> call(String? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [id],
        ),
        returnValue: _i5.Future<_i2.Either<_i6.Failure, bool>>.value(
            _FakeEither_0<_i6.Failure, bool>(
          this,
          Invocation.method(
            #call,
            [id],
          ),
        )),
      ) as _i5.Future<_i2.Either<_i6.Failure, bool>>);
}

/// A class which mocks [UpdateUserUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockUpdateUserUseCase extends _i1.Mock implements _i7.UpdateUserUseCase {
  MockUpdateUserUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i2.Either<_i6.Failure, bool>> call(_i8.UpdateMeModel? model) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [model],
        ),
        returnValue: _i5.Future<_i2.Either<_i6.Failure, bool>>.value(
            _FakeEither_0<_i6.Failure, bool>(
          this,
          Invocation.method(
            #call,
            [model],
          ),
        )),
      ) as _i5.Future<_i2.Either<_i6.Failure, bool>>);
}

/// A class which mocks [UserService].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserService extends _i1.Mock implements _i9.UserService {
  MockUserService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get isLoggedIn => (super.noSuchMethod(
        Invocation.getter(#isLoggedIn),
        returnValue: false,
      ) as bool);

  @override
  _i3.ReactiveContext get context => (super.noSuchMethod(
        Invocation.getter(#context),
        returnValue: _FakeReactiveContext_1(
          this,
          Invocation.getter(#context),
        ),
      ) as _i3.ReactiveContext);

  @override
  void clearUserData() => super.noSuchMethod(
        Invocation.method(
          #clearUserData,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void setUserData(_i10.UserEntity? userEntity) => super.noSuchMethod(
        Invocation.method(
          #setUserData,
          [userEntity],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void updateUserData({String? username}) => super.noSuchMethod(
        Invocation.method(
          #updateUserData,
          [],
          {#username: username},
        ),
        returnValueForMissingStub: null,
      );
}
